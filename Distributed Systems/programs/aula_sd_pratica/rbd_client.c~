/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "rbd.h"
#include "rbd_cif.h"


void bd(char *host)
{
  char c, *word;
  int option;
  /* Inicializando a agenda */
  handle = clnt_create (host, RBDPROG, RDBVERS, "tcp");
  printf("Selecione a função que você deseja realizar:\n");
  printf("1-Inserir\n2-Remover\n3-Buscar\n4-Sair\n");
  c = getchar();
  while(c != 4)
  {
    option = atoi(&c);
    switch(option)
    {
      case 1:
	word = (char*)malloc(512*sizeof(char));
	printf("Insira a palavra: ");
	scanf("%s", word);
	if(insere(word))
	  printf("Inserção realizada com sucesso.\n");
	else
	  printf("Ocorreu um erro na inserção.\n");
	free(word);
	break;
      case 2:
	word = (char*)malloc(512*sizeof(char));
	printf("Insira a palavra a ser removida: ");
	scanf("%s", word);
	if(remove(word))
	{
	  printf("Remoção realizada com sucesso.\n");
	}
	else
	  printf("Remoção falhou; a palavra ou não existe ou ocorreu um erro na execução do programa. Verifique essas assertatitvas e se possível tente novamente.\n");
	free(word);
	break;
      case 3:
	word = (char*)malloc(512*sizeof(char));
	printf("Insira a palavra: ");
	scanf("%s", word);
	if(busca(word))
	  printf("Palavra encontrada.\n");
	else
	  printf("Palavra não encontrada. Verifique se ela realmente existe no banco de dados.\n");
	free(word);
	break;
      case 4:
	clnt_destroy (handle);
	break;
      default:
	printf("Comando incorreto. Finalizando programa...\n");
	exit(-1);
    }
    if(c != 4)
    {
      c = getchar();
      c = getchar();
    }
  }
}

/*void
rbdprog_1(char *host)
{
	CLIENT *clnt;
	int  *result_1;
	char *inicializar_1_arg;
	int  *result_2;
	char * insere_1_arg;
	int  *result_3;
	char * remove_1_arg;
	int  *result_4;
	char * busca_1_arg;
#ifndef	DEBUG
	clnt = clnt_create (host, RBDPROG, RDBVERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	

	result_1 = inicializar_1((void*)&inicializar_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_2 = insere_1(&insere_1_arg, clnt);
	if (result_2 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_3 = remove_1(&remove_1_arg, clnt);
	if (result_3 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_4 = busca_1(&busca_1_arg, clnt);
	if (result_4 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 */


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	bd(host);
	/*rbdprog_1 (host);*/
exit (0);
}
